<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link href="/stylesheets/output.css" rel="stylesheet">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700;900&family=Inter:wght@400;500&display=swap" rel="stylesheet">
    <style>
        body { font-family: 'Inter', sans-serif; }
        .font-orbitron { font-family: 'Orbitron', sans-serif; }
        .fade-in { animation: fadeInAnimation 1s ease-in-out forwards; }
        @keyframes fadeInAnimation { from { opacity: 0; transform: translateY(10px); } to { opacity: 1; transform: translateY(0); } }
        pre { background-color: #111827; border: 1px solid #4f46e5; border-radius: 0.5rem; padding: 1rem; font-size: 0.875rem; white-space: pre-wrap; line-height: 1.5; }
        .form-input { width: 100%; max-width: 200px; margin-top: 0.5rem; padding: 0.5rem 1rem; background-color: rgba(31, 41, 55, 0.5); border: 1px solid #4338ca; border-radius: 0.5rem; outline: none; transition: all 0.2s; }
        .form-input:focus { box-shadow: 0 0 0 2px #818cf8; border-color: #818cf8; }
    </style>
</head>
<body class="bg-gray-900 text-white antialiased">
    <div class="fixed inset-0 z-[-1] bg-gradient-to-br from-gray-900 via-[#190f29] to-purple-900"></div>

    <header class="absolute top-0 left-0 w-full p-4 md:p-6 z-20">
        <div class="max-w-7xl mx-auto flex justify-between items-center">
            <div>
                <h1 class="font-orbitron text-lg font-bold text-white">Team: <span class="text-purple-400"><%= user.teamId %></span></h1>
                <p class="text-xs text-gray-400">Delegate: <span class="font-medium text-gray-300"><%= user.delegateId %></span></p>
            </div>
            <form action="/api/logout" method="POST">
                <button type="submit" class="bg-red-600/80 hover:bg-red-700/80 text-white font-bold py-2 px-4 rounded-lg transition-colors duration-300 text-sm backdrop-blur-sm">
                    Logout
                </button>
            </form>
        </div>
    </header>

    <main class="min-h-screen flex items-center justify-center p-4">

        <div id="welcomePage" class="max-w-2xl w-full text-center fade-in">
            <img src="/images/eng-rolecard.jpg" alt="Engineer" class="w-48 h-48 mx-auto rounded-full border-4 border-purple-500/50 shadow-lg shadow-purple-500/20 mb-6">
            <h1 class="font-orbitron text-4xl font-bold text-purple-400">Engineer</h1>
            <p class="mt-2 text-lg text-gray-300">Welcome, Delegate <span class="font-bold text-white"><%= user.delegateId %></span>.</p>
            <p class="mt-4 text-gray-400 max-w-lg mx-auto">The hardware is unstable. Your expertise is required to prevent a critical failure.</p>
            <button onclick="enterStory()" class="mt-8 inline-block bg-purple-600 hover:bg-purple-700 text-white font-bold text-lg px-8 py-3 rounded-lg shadow-lg shadow-purple-600/20 transform hover:scale-105 transition-all duration-300">
                Begin Mission
            </button>
        </div>

        <div id="storyPage" class="max-w-4xl w-full bg-gray-900/50 backdrop-blur-sm border border-purple-500/30 rounded-2xl shadow-2xl shadow-purple-500/10 p-8 md:p-12 hidden">
            <div class="flex flex-col md:flex-row items-center gap-8">
                <img src="/images/engstory.jpg" class="w-48 h-48 rounded-lg border-2 border-purple-500/30 flex-shrink-0" alt="Mission Briefing">
                <div class="text-left">
                    <h2 class="font-orbitron text-2xl font-bold text-purple-400 mb-4">Mission Briefing...</h2>
                    <p id="storyText" class="text-gray-300 leading-relaxed min-h-[150px]"></p>
                    <button onclick="enterSimulation()" class="mt-6 font-bold bg-purple-500/20 hover:bg-purple-500/40 text-purple-300 py-2 px-6 rounded-lg transition-colors">
                        Start Analysis
                    </button>
                </div>
            </div>
        </div>

        <div id="quizPage" class="max-w-5xl w-full bg-gray-900/50 backdrop-blur-sm border border-purple-500/30 rounded-2xl shadow-2xl shadow-purple-500/10 p-8 md:p-12 hidden">
             <div class="flex justify-between items-center mb-6">
                <h1 class="font-orbitron text-3xl font-bold text-purple-400">Engineering Analysis</h1>
                <div id="timer" class="font-orbitron text-xl font-bold bg-purple-500/10 text-purple-300 px-4 py-2 rounded-lg border border-purple-500/30">20:00</div>
            </div>
            <form id="quizForm" class="space-y-8 overflow-y-auto max-h-[60vh] pr-4">
                <div>
                    <label class="block text-md text-gray-300">Q1: The Crown Protocol Security System... Write the Boolean expression for when the gates should activate.</label>
                    <input type="text" name="q1" class="form-input" placeholder="Enter A, B, C, or D">
                    <div class="mt-2"><button type="button" onclick="getHint('q1', event)" class="text-xs font-semibold text-purple-300 bg-purple-500/10 hover:bg-purple-500/20 px-3 py-1 rounded-md">Get Hint (-5 pts)</button><p id="hint-q1" class="text-xs text-gray-400 mt-1 italic"></p></div>
                </div>
                <div>
                    <label class="block text-md text-gray-300">Q2: Phantoms encounter a data-lock circuit... Derive Boolean expression for Q.</label>
                    <input type="text" name="q2" class="form-input" placeholder="Enter A, B, C, or D">
                    <div class="mt-2"><button type="button" onclick="getHint('q2', event)" class="text-xs font-semibold text-purple-300 bg-purple-500/10 hover:bg-purple-500/20 px-3 py-1 rounded-md">Get Hint (-5 pts)</button><p id="hint-q2" class="text-xs text-gray-400 mt-1 italic"></p></div>
                </div>
                <div>
                    <label class="block text-md text-gray-300">Q3: Analyze the C program that modifies an array...</label>
                    <input type="text" name="q3" class="form-input" placeholder="Enter A, B, C, or D">
                    <div class="mt-2"><button type="button" onclick="getHint('q3', event)" class="text-xs font-semibold text-purple-300 bg-purple-500/10 hover:bg-purple-500/20 px-3 py-1 rounded-md">Get Hint (-5 pts)</button><p id="hint-q3" class="text-xs text-gray-400 mt-1 italic"></p></div>
                </div>
                <div>
                    <label class="block text-md text-gray-300">Q4: Examine integer division in C.</label>
                    <input type="text" name="q4" class="form-input" placeholder="Enter A, B, C, or D">
                    <div class="mt-2"><button type="button" onclick="getHint('q4', event)" class="text-xs font-semibold text-purple-300 bg-purple-500/10 hover:bg-purple-500/20 px-3 py-1 rounded-md">Get Hint (-5 pts)</button><p id="hint-q4" class="text-xs text-gray-400 mt-1 italic"></p></div>
                </div>
                <div>
                    <label class="block text-md text-gray-300">Q5: Analyze this sum calculation in a loop.</label>
                    <input type="text" name="q5" class="form-input" placeholder="Enter A, B, C, or D">
                    <div class="mt-2"><button type="button" onclick="getHint('q5', event)" class="text-xs font-semibold text-purple-300 bg-purple-500/10 hover:bg-purple-500/20 px-3 py-1 rounded-md">Get Hint (-5 pts)</button><p id="hint-q5" class="text-xs text-gray-400 mt-1 italic"></p></div>
                </div>
                <div>
                    <label class="block text-md text-gray-300">Q6: Array out-of-bounds issue.</label>
                    <input type="text" name="q6" class="form-input" placeholder="Enter A, B, C, or D">
                    <div class="mt-2"><button type="button" onclick="getHint('q6', event)" class="text-xs font-semibold text-purple-300 bg-purple-500/10 hover:bg-purple-500/20 px-3 py-1 rounded-md">Get Hint (-5 pts)</button><p id="hint-q6" class="text-xs text-gray-400 mt-1 italic"></p></div>
                </div>
                <button type="button" onclick="submitAnswers()" class="w-full mt-6 font-bold text-lg text-white bg-purple-600 hover:bg-purple-700 py-3 rounded-lg transition-all duration-300">
                    Submit Analysis
                </button>
            </form>
            <p id="result" class="text-center text-sm mt-4 min-h-[20px]"></p>
        </div>
    </main>

<script>
    let startTime;
    let timerInterval;
    const storyContent = `Engineer's Mission: The simulation begins to break apart into raw structures: firewalls disguised as logic gates, traps hidden in lines of code. You must debug the illusion itself — writing and rewriting commands to bend Nexus Core’s architecture back against itself. Every successful solution rewires a piece of the false world.`;

    function typeWriter(text, element, delay = 20) {
        let i = 0;
        element.innerHTML = "";
        function typing() {
            if (i < text.length) {
                element.innerHTML += text.charAt(i);
                i++;
                setTimeout(typing, delay);
            }
        }
        typing();
    }

    function enterStory() {
        document.getElementById("welcomePage").style.display = "none";
        const storyPage = document.getElementById("storyPage");
        storyPage.classList.remove("hidden");
        storyPage.classList.add("fade-in");
        typeWriter(storyContent, document.getElementById("storyText"));
    }

    function enterSimulation() {
        document.getElementById("storyPage").style.display = "none";
        const quizPage = document.getElementById("quizPage");
        quizPage.classList.remove("hidden");
        quizPage.classList.add("fade-in");
        startTime = Date.now();
        startTimer(1200);
    }

    function startTimer(duration) {
        let timeLeft = duration;
        const timerElement = document.getElementById("timer");
        timerInterval = setInterval(() => {
            timeLeft--;
            const minutes = Math.floor(timeLeft / 60);
            let seconds = timeLeft % 60;
            seconds = seconds < 10 ? "0" + seconds : seconds;
            timerElement.textContent = `${minutes}:${seconds}`;
            if (timeLeft <= 0) {
                clearInterval(timerInterval);
                submitAnswers();
            }
        }, 1000);
    }
    
    async function getHint(questionId, event) {
        const hintButton = event.target;
        const hintElement = document.getElementById(`hint-${questionId}`);
        try {
            const response = await fetch('/api/get-hint', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ questionId: questionId })
            });
            const data = await response.json();
            if (response.ok) {
                hintElement.textContent = `Hint: ${data.hint}`;
                hintButton.disabled = true;
                hintButton.textContent = 'Hint Used';
                hintButton.classList.add('opacity-50', 'cursor-not-allowed');
            } else {
                hintElement.textContent = data.message || 'Could not retrieve hint.';
            }
        } catch (error) {
            hintElement.textContent = 'Network error while fetching hint.';
        }
    }

    async function submitAnswers() {
        clearInterval(timerInterval);
        const timeTakenSec = Math.floor((Date.now() - startTime) / 1000);
        const form = document.getElementById("quizForm");
        const resultEl = document.getElementById("result");
        const answers = {};
        for (const element of form.elements) {
            if (element.name) {
                answers[element.name] = element.value.trim();
            }
        }
        const payload = { role: "eng", answers: answers, timeTakenSec: timeTakenSec };
        try {
            const response = await fetch("/api/submit-progress", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(payload)
            });
            const data = await response.json();
            if (response.ok) {
                resultEl.className = 'text-center text-sm mt-4 text-green-400';
                resultEl.textContent = `Analysis complete. Final Score: ${data.score}. Awaiting team...`;
                setTimeout(() => { window.location.href = "/post-mission-wait"; }, 2000);
            } else {
                resultEl.className = 'text-center text-sm mt-4 text-red-400';
                resultEl.textContent = data.message || 'Submission failed.';
            }
        } catch (error) {
            resultEl.className = 'text-center text-sm mt-4 text-red-400';
            resultEl.textContent = 'A network error occurred.';
        }
    }
</script>
</body>
</html>

