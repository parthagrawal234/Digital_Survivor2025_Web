<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link href="/stylesheets/output.css" rel="stylesheet">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700;900&family=Inter:wght@400;500&display=swap" rel="stylesheet">
    <style>
        body { font-family: 'Inter', sans-serif; }
        .font-orbitron { font-family: 'Orbitron', sans-serif; }
        .fade-in { animation: fadeInAnimation 1s ease-in-out forwards; }
        @keyframes fadeInAnimation { from { opacity: 0; transform: translateY(10px); } to { opacity: 1; transform: translateY(0); } }
        pre { background-color: #111827; border: 1px solid #4f46e5; border-radius: 0.5rem; padding: 1rem; font-size: 0.875rem; white-space: pre-wrap; line-height: 1.5; }
        .form-input { width: 100%; max-width: 200px; margin-top: 0.5rem; padding: 0.5rem 1rem; background-color: rgba(31, 41, 55, 0.5); border: 1px solid #4338ca; border-radius: 0.5rem; outline: none; transition: all 0.2s; }
        .form-input:focus { box-shadow: 0 0 0 2px #818cf8; border-color: #818cf8; }
        .form-input:disabled { background-color: rgba(55, 65, 81, 0.5); cursor: not-allowed; }
        .submit-btn { padding: 0.5rem 1rem; border-radius: 0.375rem; font-size: 0.875rem; font-weight: 600; transition: background-color 0.2s; }
        .submit-btn:disabled { background-color: #374151; cursor: not-allowed; opacity: 0.5; }
    </style>
</head>
<body class="bg-gray-900 text-white antialiased">
    <div class="fixed inset-0 z-[-1] bg-gradient-to-br from-gray-900 via-[#190f29] to-purple-900"></div>

    <header class="absolute top-0 left-0 w-full p-4 md:p-6 z-20">
        <div class="max-w-7xl mx-auto flex justify-between items-center">
            <div>
                <h1 class="font-orbitron text-lg font-bold text-white">Team: <span class="text-purple-400"><%= user.teamId %></span></h1>
                <p class="text-xs text-gray-400">Delegate: <span class="font-medium text-gray-300"><%= user.delegateId %></span></p>
            </div>
            <form action="/api/logout" method="POST">
                <button type="submit" class="bg-red-600/80 hover:bg-red-700/80 text-white font-bold py-2 px-4 rounded-lg">Logout</button>
            </form>
        </div>
    </header>

    <main class="min-h-screen flex items-center justify-center p-4">
        <div id="welcomePage" class="max-w-2xl w-full text-center fade-in">
            <img src="/images/eng-rolecard.jpg" alt="Engineer" class="w-48 h-48 mx-auto rounded-full border-4 border-purple-500/50 shadow-lg mb-6">
            <h1 class="font-orbitron text-4xl font-bold text-purple-400">Engineer</h1>
            <p class="mt-2 text-lg text-gray-300">Welcome, Delegate <span class="font-bold text-white"><%= user.delegateId %></span>.</p>
            <p class="mt-4 text-gray-400 max-w-lg mx-auto">The hardware is unstable. Your expertise is required to prevent a critical failure.</p>
            <button onclick="enterStory()" class="mt-8 inline-block bg-purple-600 hover:bg-purple-700 text-white font-bold text-lg px-8 py-3 rounded-lg shadow-lg">Begin Mission</button>
        </div>

        <div id="storyPage" class="max-w-4xl w-full bg-gray-900/50 backdrop-blur-sm border border-purple-500/30 rounded-2xl shadow-2xl p-8 md:p-12 hidden">
            <div class="flex flex-col md:flex-row items-center gap-8">
                <img src="/images/engstory.jpg" class="w-48 h-48 rounded-lg border-2 border-purple-500/30 flex-shrink-0" alt="Mission Briefing">
                <div class="text-left">
                    <h2 class="font-orbitron text-2xl font-bold text-purple-400 mb-4">Mission Briefing...</h2>
                    <p id="storyText" class="text-gray-300 leading-relaxed min-h-[150px]"></p>
                    <button onclick="enterSimulation()" class="mt-6 font-bold bg-purple-500/20 hover:bg-purple-500/40 text-purple-300 py-2 px-6 rounded-lg">Start Analysis</button>
                </div>
            </div>
        </div>

        <div id="quizPage" class="max-w-5xl w-full bg-gray-900/50 backdrop-blur-sm border border-purple-500/30 rounded-2xl shadow-2xl p-8 md:p-12 hidden">
             <div class="flex justify-between items-center mb-6">
                <h1 class="font-orbitron text-3xl font-bold text-purple-400">Engineering Analysis</h1>
                <div id="timer" class="font-orbitron text-xl font-bold bg-purple-500/10 text-purple-300 px-4 py-2 rounded-lg border border-purple-500/30">20:00</div>
            </div>
            <div class="space-y-8 overflow-y-auto max-h-[60vh] pr-4" id="questions-container">
                <!-- Dynamically generated questions -->
            </div>
            <p id="result" class="text-center text-sm mt-4 min-h-[20px]"></p>
        </div>
    </main>

<script>
    let startTime;
    let timerInterval;
    let teamSolvedQuestions = [];
    const totalQuestions = 6;
    const storyContent = `Engineer's Mission: The simulation begins to break apart into raw structures: firewalls disguised as logic gates, traps hidden in lines of code. You must debug the illusion itself — writing and rewriting commands to bend Nexus Core’s architecture back against itself. Every successful solution rewires a piece of the false world.`;

    const questions = [
        { 
            id: 'eng-q1', 
            text: `Q1: The Crown Protocol Security System (2149) – In the year 2149, Nexus Core governs humanity through Surveillance Gates that monitor night-cycle intrusions.<br> Night-cycle (N=1) and Recon Drone detects intruders (V=1). <br> Phantom Operative nearby (P=1) and Manual Override by Nexus (M=1) can force activation. <br> Write the Boolean expression for when the gates should activate. (5 Points)<br><br> Options:<br> A) Y = (N . V) + P + M<br> B) Y = (N + V) . P + M<br> C) Y = (N . V) + P . M<br> D) Y = (N + V) + P . M`
        },
        { 
            id: 'eng-q2', 
            text: `Q2: Phantoms encounter a data-lock circuit guarding AI King's firewall. <br> Four inputs: A & B from rebel keys, C & D from Nexus nodes. Output Q decides firewall opening.<br> Derive Boolean expression for Q. (5 Points)<br><br> <img src="/images/engques.jpg" alt="logic gate" class="my-2 rounded max-w-xs mx-auto"><br> Options:<br> A) Q=(A+B)'.(CD)'<br> B) Q=(A+B)+(CD)<br> C) Q=(A+B).(CD)'<br> D) Q=(A.B)'.(C+D)`
        },
        { 
            id: 'eng-q3', 
            text: `Q3: Analyze the following C program that modifies an array. Output the final array after the loop. (4 Points)<br><pre><code>int main() {<br>    int arr[7] = {1,2,3,4,5,6,7};<br>    for(int i=0;i<7;i++){<br>        if(i%2==0) <br>        arr[i] = arr[i]*2;<br>        else <br>        arr[i] = arr[i]-1;<br>    }<br>    for(int i=0;i<7;i++) <br>    printf("%d ",arr[i]);<br>    return 0;<br>}</code></pre>Options:<br> A) 2 1 6 3 10 5 14<br> B) 1 1 2 3 4 5 6<br> C) 2 2 6 4 10 6 14<br> D) 1 2 3 4 5 6 7`
        },
        { 
            id: 'eng-q4', 
            text: `Q4: What is the output of the program? (3 Points)<br><pre><code>int main() { <br>    int i, j, sum = 0; <br>    for (i = 1; i <= 4; i++) { <br>        for (j = 1; j <= 4; j++) { <br>            if ((i + j) % 2 == 0) continue; <br>            if (i * j > 10) break; <br>            sum += i * j - (i + j); <br>        } <br>    } <br>    printf("%d\\n", sum);<br>    return 0; <br>}</code></pre>Options: <br> A) -10 <br> B) -2 <br> C) 0 <br> D) 10`
        },
        { 
            id: 'eng-q5', 
            text: `Q5: What will be the output? (4 Points)<br><pre><code>int main() { <br>    char str[10] = "CSE"; <br>    printf("%d %d\\n", (int)sizeof(str), (int)strlen(str)); <br>    strcpy(str + 2, str);<br>    printf("%s\\n", str); <br>    printf("%c %c %c\\n", str[0], str[2], str[5]); <br>    return 0; <br>}</code></pre>Options: <br> A) <br>10 3 <br> CSEDE <br> C S D<br><br> B) <br>10 3 <br> CSE <br> C S E<br><br> C) <br>10 3 <br> CSEDE <br> C S E<br><br> D) <br>10 5 <br> CSEDE <br> C S D`
        },
        { 
            id: 'eng-q6', 
            text: `Q6: What is the code for this output? (4 Points)<br><br> * <br> *** <br> ***** <br> ******* <br><pre><code>A) <br>for(int i=1;i<=4;i++){ <br>    for(int j=1;j<=4-i;j++) <br>        printf(" "); <br>    for(int j=1;j<=2*i-1;j++) <br>    printf("*"); <br>    printf("\\n"); <br>} <br><br>B) <br>for(int i=1;i<=4;i++){ <br>    for(int j=1;j<=i;j++) <br>    printf(" "); <br>    for(int j=1;j<=2*i-1;j++) <br>        printf("*"); <br>    printf("\\n"); <br>} <br><br>C) <br>int i,j; <br>for(i=1;i<=4;i++){ <br>    for(j=1;j<=4-i;j++) <br>       printf(" "); <br>    for(j=1;j<=2*i-1;j++) <br>       printf("*"); <br>    printf("\\n"); <br><br>} <br><br>D) Both A and C</code></pre>`
        }
    ];

    function buildQuestions() {
        const container = document.getElementById('questions-container');
        container.innerHTML = '';
        questions.forEach(q => {
            container.innerHTML += `
                <div id="${q.id}-container" class="p-4 border border-gray-700 rounded-lg">
                    <label class="block text-md text-gray-300">${q.text}</label>
                    <div class="flex items-center gap-4 mt-2">
                        <input type="text" id="${q.id}-input" class="form-input" placeholder="Enter A, B, C, or D">
                        <button type="button" id="${q.id}-submit" onclick="submitAnswer('${q.id}')" class="submit-btn bg-purple-600 hover:bg-purple-700 text-white">Submit</button>
                    </div>
                    <p id="${q.id}-feedback" class="text-xs mt-1 min-h-[16px]"></p>
                </div>
            `;
        });
    }

    document.addEventListener('DOMContentLoaded', async () => {
        buildQuestions();
        const progressRes = await fetch('/api/get-progress');
        const progress = await progressRes.json();
        if (progress.solvedQuestions) {
            teamSolvedQuestions = progress.solvedQuestions;
            teamSolvedQuestions.forEach(qId => {
                if (questions.some(q => q.id === qId)) {
                    lockQuestion(qId, 'Already Solved');
                }
            });
            checkIfAllSolved();
        }
    });

    function typeWriter(text, element, delay = 20) {
        let i = 0;
        element.innerHTML = "";
        function typing() {
            if (i < text.length) {
                element.innerHTML += text.charAt(i);
                i++;
                setTimeout(typing, delay);
            }
        }
        typing();
    }

    function enterStory() {
        document.getElementById("welcomePage").style.display = "none";
        const storyPage = document.getElementById("storyPage");
        storyPage.classList.remove("hidden");
        storyPage.classList.add("fade-in");
        typeWriter(storyContent, document.getElementById("storyText"));
    }

    function enterSimulation() {
        document.getElementById("storyPage").style.display = "none";
        const quizPage = document.getElementById("quizPage");
        quizPage.classList.remove("hidden");
        quizPage.classList.add("fade-in");
        startTime = Date.now();
        startTimer(1200);
    }

    function startTimer(duration) {
        let timeLeft = duration;
        const timerElement = document.getElementById("timer");
        timerInterval = setInterval(() => {
            timeLeft--;
            const minutes = Math.floor(timeLeft / 60);
            let seconds = timeLeft % 60;
            seconds = seconds < 10 ? "0" + seconds : seconds;
            timerElement.textContent = `${minutes}:${seconds}`;
            if (timeLeft <= 0) {
                clearInterval(timerInterval);
                endMission();
            }
        }, 1000);
    }

    function lockQuestion(questionId, feedbackText) {
        document.getElementById(`${questionId}-input`).disabled = true;
        document.getElementById(`${questionId}-submit`).disabled = true;
        const feedbackEl = document.getElementById(`${questionId}-feedback`);
        feedbackEl.textContent = feedbackText;
        feedbackEl.className = 'text-xs mt-1 text-green-400';
    }

    async function submitAnswer(questionId) {
        const input = document.getElementById(`${questionId}-input`);
        const feedbackEl = document.getElementById(`${questionId}-feedback`);
        const answer = input.value;
        const response = await fetch('/api/check-answer', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ questionId, answer })
        });
        const result = await response.json();
        if (result.correct) {
            lockQuestion(questionId, 'Correct!');
            if (!teamSolvedQuestions.includes(questionId)) {
                teamSolvedQuestions.push(questionId);
            }
            checkIfAllSolved();
        } else {
            feedbackEl.textContent = 'Incorrect. Try again.';
            feedbackEl.className = 'text-xs mt-1 text-red-400';
            setTimeout(() => feedbackEl.textContent = '', 2000);
        }
    }

    function checkIfAllSolved() {
        const roleQuestions = questions.map(q => q.id);
        const solvedRoleQuestions = teamSolvedQuestions.filter(qId => roleQuestions.includes(qId));
        if (solvedRoleQuestions.length >= totalQuestions) {
            endMission();
        }
    }

    async function endMission() {
        clearInterval(timerInterval);
        const timeTakenSec = Math.floor((Date.now() - startTime) / 1000);
        await fetch('/api/end-mission', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ timeTakenSec })
        });
        document.getElementById('result').textContent = 'All questions attempted. Awaiting team...';
        setTimeout(() => window.location.href = '/post-mission-wait', 2000);
    }
</script>
</body>
</html>

