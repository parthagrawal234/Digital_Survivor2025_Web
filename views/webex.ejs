<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <script src="/socket.io/socket.io.js"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Share+Tech+Mono&display=swap" rel="stylesheet">
    <style>
        body {
            margin: 0; padding: 0; font-family: 'Share Tech Mono', monospace;
            background-color: #0d0208; color: #e0e0e0;
            overflow: hidden; display: flex; justify-content: center;
            align-items: center; height: 100vh;
        }
        #network-canvas { position: fixed; top: 0; left: 0; width: 100%; height: 100%; z-index: 0; }
        .page {
            position: absolute; width: 100%; height: 100%;
            display: flex; justify-content: center; align-items: center;
            flex-direction: column; opacity: 0; visibility: hidden;
            transform: scale(0.98);
            transition: opacity 0.5s ease-out, visibility 0.5s, transform 0.5s ease-out;
            z-index: 10;
        }
        .page.active { opacity: 1; visibility: visible; transform: scale(1); }
        .content-panel {
            width: 70%; max-width: 1000px; background: rgba(20, 10, 10, 0.6);
            border: 1px solid #ff073a;
            box-shadow: 0 0 25px #ff073a, inset 0 0 15px rgba(255, 7, 58, 0.4);
            backdrop-filter: blur(8px); padding: 50px; text-align: center;
        }
        .content-panel h2 {
            color: #ff073a; text-shadow: 0 0 10px #ff073a;
            font-size: 2.5rem; margin-top: 0;
        }
        #story-text {
            color: #c0c0c0; font-size: 1.2rem; line-height: 1.7; min-height: 120px;
        }
        #challenge-page p { color: #c0c0c0; font-size: 1.1rem; }
        .answer-box {
            width: 80%; margin-top: 20px; padding: 12px;
            background: #1a1a1a; border: 1px solid #555;
            color: #e0e0e0; font-family: 'Share Tech Mono', monospace; font-size: 1rem;
        }
        .answer-box:focus {
            outline: none; border-color: #ff073a; box-shadow: 0 0 10px #ff073a;
        }
        .continue-btn {
            margin-top: 30px; padding: 12px 25px; background: transparent;
            border: 1px solid #ff073a; color: #ff073a;
            cursor: pointer; transition: all 0.3s ease;
        }
        .continue-btn:hover {
            background: #ff073a; color: #0d0208; box-shadow: 0 0 15px #ff073a;
        }
        .logout-form {
            position: absolute;
            top: 20px;
            right: 20px;
            z-index: 20;
        }
        .logout-button {
            padding: 10px 15px;
            background: rgba(255, 7, 58, 0.2);
            border: 1px solid #ff073a;
            color: #ff073a;
            cursor: pointer;
            transition: all 0.3s ease;
            font-family: 'Share Tech Mono', monospace;
        }
        .logout-button:hover {
            background: #ff073a;
            color: #0d0208;
        }
    </style>
</head>
<body>
    <canvas id="network-canvas"></canvas>

    <form action="/api/logout" method="POST" class="logout-form">
        <button type="submit" class="logout-button">Logout</button>
    </form>

    <div id="story-page" class="page active">
        <div class="content-panel">
            <h2>FINAL DIRECTIVE</h2>
            <p id="story-text"></p>
            <button class="continue-btn" onclick="showChallenge()">VIEW OBJECTIVE</button>
        </div>
    </div>

    <div id="challenge-page" class="page">
        <div class="content-panel">
            <h2>FINAL OBJECTIVE</h2>
            <p>
                The head guard, a culinary enthusiast, is known to be extremely forgetful. He jots everything down in his personal digital recipe book. Our intel suggests he's hidden the access password for the detention block somewhere within his favorite recipe. The agent managed to sneak out a copy of the file before getting caught. Can you cook up a solution and find the password?
            </p>
            <a href="https://recipie-book-peach.vercel.app/">Recipe Book</a>
            <form id="finalChallengeForm">
                <input type="text" id="finalAnswer" class="answer-box" placeholder="Submit your answer here">
                <button type="submit" class="continue-btn">Submit Answer</button>
            </form>
            <p id="message" style="margin-top: 15px; min-height: 20px;"></p>
        </div>
    </div>

<script>
    const STORYLINE = "Intel confirms the final access code must be derived from a logic puzzle. This is a ghost operation - solve the puzzle, get the final code, and get out without a trace. The network is watching. The team's final time stops when you succeed. Don't fail.";

    function typeWriter(text, element, delay = 25) {
        let i = 0;
        element.innerHTML = "";
        function typing() {
            if (i < text.length) {
                element.innerHTML += text.charAt(i);
                i++;
                setTimeout(typing, delay);
            }
        }
        typing();
    }

    function showChallenge() {
        document.getElementById('story-page').classList.remove('active');
        document.getElementById('challenge-page').classList.add('active');
    }
    
    document.addEventListener('DOMContentLoaded', async () => {
        // Start visual effects immediately
        typeWriter(STORYLINE, document.getElementById('story-text'));

        // Handle real-time logic in a try-catch to prevent crashes
        try {
            if (typeof io === 'undefined') {
                throw new Error("Socket.IO client not loaded.");
            }
            const teamId = '<%= user.teamId %>';
            const delegateId = '<%= user.delegateId %>';
            const socket = io();

            socket.on('connect', () => {
                socket.emit('join-room', { teamId, delegateId });
            });

            socket.on('final-challenge-complete', (data) => {
                const messageEl = document.getElementById('message');
                messageEl.style.color = 'lightgreen';
                messageEl.textContent = 'Team has solved the challenge! Redirecting...';
                
                setTimeout(() => {
                    window.location.href = data.redirectUrl;
                }, 2000);
            });
        } catch (error) {
            console.error("Failed to initialize Socket.IO:", error.message);
        }
        
        // Form submission logic
        const form = document.getElementById('finalChallengeForm');
        const messageEl = document.getElementById('message');
        const progressRes = await fetch('/api/get-progress');
        const progress = await progressRes.json();
        // It then checks if the 'solvedQuestions' array includes the ID for this final challenge ('final-q1').
        if (progress.solvedQuestions && progress.solvedQuestions.includes('final-q1')) {
            // If it has already been solved, a success message is shown and the form is disabled.
            messageEl.style.color = 'lightgreen';
            messageEl.textContent = 'Challenge already completed by your team.';
            answerInput.disabled = true;
            submitButton.disabled = true;
        }

        form.addEventListener('submit', async (e) => {
            e.preventDefault();
            messageEl.textContent = '';
            const finalAnswer = document.getElementById('finalAnswer').value;

            try {
                const response = await fetch('/api/submit-final-challenge', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ finalAnswer })
                });

                const result = await response.json();

                if (response.ok && result.success) {
                    messageEl.style.color = 'lightgreen';
                    messageEl.textContent = 'Correct! Awaiting team redirect...';
                    form.querySelector('button').disabled = true;
                    form.querySelector('input').disabled = true;
                } else {
                    messageEl.style.color = '#ff073a';
                    messageEl.textContent = result.message || 'Incorrect answer.';
                }
            } catch (error) {
                messageEl.style.color = '#ff073a';
                messageEl.textContent = 'A network error occurred.';
            }
        });
    });

    // --- Animated Network Background ---
    const canvas = document.getElementById('network-canvas');
    const ctx = canvas.getContext('2d');
    let particles = [];
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;

    window.addEventListener('resize', () => {
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
        init();
    });

    class Particle {
        constructor(x, y, size, color, speedX, speedY) { this.x = x; this.y = y; this.size = size; this.color = color; this.speedX = speedX; this.speedY = speedY; }
        draw() { ctx.beginPath(); ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2); ctx.fillStyle = this.color; ctx.fill(); }
        update() { if (this.x > canvas.width || this.x < 0) this.speedX = -this.speedX; if (this.y > canvas.height || this.y < 0) this.speedY = -this.speedY; this.x += this.speedX; this.y += this.speedY; this.draw(); }
    }

    function init() {
        particles = [];
        const numberOfParticles = (canvas.height * canvas.width) / 9000;
        for (let i = 0; i < numberOfParticles; i++) {
            let size = (Math.random() * 2) + 1; let x = Math.random() * canvas.width; let y = Math.random() * canvas.height;
            let speedX = (Math.random() * 0.4) - 0.2; let speedY = (Math.random() * 0.4) - 0.2;
            particles.push(new Particle(x, y, size, '#333', speedX, speedY));
        }
    }

    function connect() {
        let opacityValue = 1;
        for (let a = 0; a < particles.length; a++) {
            for (let b = a; b < particles.length; b++) {
                let distance = ((particles[a].x - particles[b].x) * (particles[a].x - particles[b].x)) + ((particles[a].y - particles[b].y) * (particles[a].y - particles[b].y));
                if (distance < (canvas.width / 7) * (canvas.height / 7)) {
                    opacityValue = 1 - (distance / 20000);
                    ctx.strokeStyle = `rgba(255, 7, 58, ${opacityValue})`;
                    ctx.lineWidth = 1;
                    ctx.beginPath(); ctx.moveTo(particles[a].x, particles[a].y);
                    ctx.lineTo(particles[b].x, particles[b].y); ctx.stroke();
                }
            }
        }
    }

    function animate() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        for (let i = 0; i < particles.length; i++) { particles[i].update(); }
        connect();
        requestAnimationFrame(animate);
    }

    init();
    animate();
</script>
</body>
</html>

